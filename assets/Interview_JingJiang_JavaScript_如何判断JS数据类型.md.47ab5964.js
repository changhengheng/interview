import{_ as i,o as t,c as e,O as l}from"./chunks/framework.3d6e08ae.js";const S=JSON.parse('{"title":"如何判断JS数据类型","description":"","frontmatter":{},"headers":[],"relativePath":"Interview/JingJiang/JavaScript/如何判断JS数据类型.md","filePath":"Interview/JingJiang/JavaScript/如何判断JS数据类型.md"}'),a={name:"Interview/JingJiang/JavaScript/如何判断JS数据类型.md"},n=l('<h1 id="如何判断js数据类型" tabindex="-1">如何判断JS数据类型 <a class="header-anchor" href="#如何判断js数据类型" aria-label="Permalink to &quot;如何判断JS数据类型&quot;">​</a></h1><ul><li><p>typeof操作符</p><ul><li>判断一个<strong>值</strong>的类型，返回一个小写的值的类型的字符串</li><li>可以精确判定8种数据类型中的5种</li></ul></li><li><p>instanceof</p><ul><li>用来精确判断引用类型数据的类型</li><li>A instanceof B: <ul><li>B是一个构造函数，A是一个实例对象，判断B的原型对象是否在A的原型链上（判断A是不是B的实例对象）</li><li>如果存在则返回true 否则返回false，不是对象实例也返回false</li><li>判断一个值是不是数组：A instanceof Array</li><li>判断一个值是不是对象：A instanceof Object</li></ul></li></ul></li><li><p>相等和全等操作符</p><ul><li>可以判定 null 和 undefined，因为这两种类型只有一个值：a === null/undefined</li></ul></li><li><p>typeof、instanceof、相等和全等，三种方式结合起来可以判断任意数据的类型</p></li><li><p>Object.prototype.toString.call(obj).slice(8,-1) 判断任意数据的数据类型，结果是大写的字符串。只有对象的toString调用才有[object 数据类型]的效果，所以需要改变this指向借用对象的toString才能判断其他数据的数据类型</p></li><li><p>Array.isArray() 判断一个值是否是数组类型</p></li></ul>',2),r=[n];function o(s,_,c,p,u,d){return t(),e("div",null,r)}const J=i(a,[["render",o]]);export{S as __pageData,J as default};
