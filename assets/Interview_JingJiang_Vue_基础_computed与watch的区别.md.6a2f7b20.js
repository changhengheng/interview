import{_ as t,o as e,c,O as a}from"./chunks/framework.3d6e08ae.js";const s=JSON.parse('{"title":"computed 与 watch 的区别","description":"","frontmatter":{},"headers":[],"relativePath":"Interview/JingJiang/Vue/基础/computed与watch的区别.md","filePath":"Interview/JingJiang/Vue/基础/computed与watch的区别.md"}'),i={name:"Interview/JingJiang/Vue/基础/computed与watch的区别.md"},o=a('<h1 id="computed-与-watch-的区别" tabindex="-1">computed 与 watch 的区别 <a class="header-anchor" href="#computed-与-watch-的区别" aria-label="Permalink to &quot;computed 与 watch 的区别&quot;">​</a></h1><ul><li><p>wacth 监听已有数据。 computed 通过已有数据计算新的数据。</p></li><li><p>computed 有缓存；wacth 没有缓存；</p></li><li><p>computed 不支持异步，必须同步返回计算结果；watch 支持异步，可以在异步操作后更新数据显示；</p></li><li><p>computed 能完成的 ，watch 都能完成。但是，watch 能做的，computed 不一定能做。</p></li><li><p>计算属性只是监视了使用到的数据，watch 可以深度监视</p></li><li><p>wacth：一对多或者一对一：一个属性的变化可以同时被多个属性监听； computed 多对一或者一对一：可以由多个或一个数据计算出一个新的数据；</p></li></ul><ul><li>选择: <ul><li>如果是根据已有数据计算出一个新数据 ==&gt; computed</li><li>如果涉及到异步操作 / 深度监视 ==&gt; watch</li><li>一旦一个数据变化， 我们需要做一系列操作 ===&gt; watch</li></ul></li></ul>',3),l=[o];function p(d,u,_,n,h,r){return e(),c("div",null,l)}const w=t(i,[["render",p]]);export{s as __pageData,w as default};
