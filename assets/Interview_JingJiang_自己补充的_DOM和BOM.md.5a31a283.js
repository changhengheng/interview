import{_ as l,o as i,c as e,U as o}from"./chunks/framework.e0394e94.js";const M=JSON.parse('{"title":"DOM和BOM","description":"","frontmatter":{},"headers":[],"relativePath":"Interview/JingJiang/自己补充的/DOM和BOM.md","filePath":"Interview/JingJiang/自己补充的/DOM和BOM.md","lastUpdated":null}'),t={name:"Interview/JingJiang/自己补充的/DOM和BOM.md"},u=o('<h1 id="dom和bom" tabindex="-1">DOM和BOM <a class="header-anchor" href="#dom和bom" aria-label="Permalink to &quot;DOM和BOM&quot;">​</a></h1><h2 id="dom" tabindex="-1">DOM <a class="header-anchor" href="#dom" aria-label="Permalink to &quot;DOM&quot;">​</a></h2><ul><li><p>是W3C制订的一套技术规范，用来规定 Javascript脚本如何与HTML进行交互</p></li><li><p>DOM规定了一系列标准接口，允许开发人员通过标准方式访问文档结构、操作网页内容、控制样式和行为等</p></li><li><p>加载 HTML 页面时， Web浏览器生成一个树型结构，用来表示页面内部结构。DOM 将这种树型结构理解为由节点组成的DOM树</p></li><li><p>document是window对象的一个属性，也是DOM的全局对象，代表整个文档</p></li><li><p>在网页中所有对象和内容都被称为节点。</p><ul><li>节点(Node)是DOM最基本的单元,并派生出不同类型,它们共同构成了文档的树形结构模型</li><li>节点类型： <ul><li>文档节点 document</li><li>元素节点 Element 标签</li><li>属性节点 attr 标签的属性</li><li>注释节点 comment 所有的注释</li><li>文本节点 text 文本内容</li></ul></li><li>获取节点的名称、类型、值 <ul><li>nodeName：节点的名称</li><li>nodeType：节点的类型</li><li>nodeValue：节点的值</li></ul></li><li>childNodes:获取所有的子节点</li></ul></li><li><p>传统方法获取元素节点</p><ul><li>通过标签名获取 <ul><li>getElementsByTagName(&quot;标签名&quot;)</li><li>得到的是一个对象格式（HTMLConllection集合）,也是一个伪数组</li><li>因为是一个集合，所以必须添加下标来使用</li></ul></li><li>通过id获取元素 <ul><li>getElementById(&quot;id值&quot;)</li><li>得到的是节点对象，可以直接使用 ，因为一定是一个单数</li></ul></li><li>通过class获取元素 <ul><li>getElementsByClassName(&quot;类名&quot;)</li><li>得到的是一个HTMLConllection对象 是一个复数，使用的时候添加下标</li></ul></li></ul></li><li><p>Selector API:</p><ul><li>html5规范定义的新的方法，可以通过css选择器的方式选择元素</li><li>querySelector(&quot;选择器&quot;)：单个元素，就算选择器选择多个，仍然选取第一个元素</li><li>querySelectorAll(&quot;选择器&quot;)：多个元素，就算选择器选择器一个，是一个NodeList集合</li></ul></li><li><p>新旧获取元素方法的对比：</p><ul><li>传统方法 <ul><li>获取多个元素的集合是HTMLConllection对象</li><li>HTMLConllection对象是动态的，会监听获取的元素改变，一旦改变则会影响HTMLConllection对象的值</li></ul></li><li>SelectorsAPI <ul><li>获取多个元素的集合是NodeList对象</li><li>NodeList对象是静态的，一旦获取过之后，无论元素怎么发生变化，都不可能影响NodeList中的值</li></ul></li></ul></li><li><p>通过节点关系来获取元素</p><ul><li>childNodes:获取父级中的所有的节点（所有类型的节点，不是单单元素节点），很少使用</li><li>children:获取父级中所有的子元素节点</li><li>firstElementChild:获取第一个子元素节点</li><li>lastElementChild:获取最后一个子元素节点</li><li>parentNode:获取父节点</li><li>nextElementSilbling:下一个兄弟元素节点</li><li>previousElementSilbling:上一个兄弟元素节</li></ul></li><li><p>获取html body head标签</p><ul><li>直接获取也是可以的，但是doucment对象上提供了三个属性 方便我们获取这三个特殊的元素</li><li>分别是：document.documentElement document.body document.head</li></ul></li><li><p>创建节点</p><ul><li>document.createElement(&quot;标签名&quot;)： 创建一个元素节点</li><li>document.createTextNode(&quot;文本内容&quot;)：创建一个文本节点：（需要插入元素中）</li><li>textContent：直接给创建的新元素一个内容：</li></ul></li><li><p>插入节点：</p><ul><li>A.appendChild(B): <ul><li>在父节点A的内部末尾插入元素B</li><li>插入节点并不是新元素，也可以插入已经存在的元素</li></ul></li><li>A.insertBefore(new,old): <ul><li>把一个new元素，插入到old元素的前边，和old元素是兄弟关系，A是两个元素的父元素</li><li>插入节点并不是新元素，也可以插入已经存在的元素</li></ul></li></ul></li><li><p>替换节点：</p><ul><li>A.replaceChild(new,old) <ul><li>用一个new元素替换ol的元素，A是old的父元素</li><li>也可以使用已经存在的元素替换</li></ul></li></ul></li><li><p>删除节点：</p><ul><li><p>A.remove()</p><ul><li>删除A元素</li></ul></li><li><p>A.removeChild(B):</p><ul><li>删除A的子元素B</li></ul></li></ul></li></ul><h2 id="什么是bom" tabindex="-1">什么是BOM? <a class="header-anchor" href="#什么是bom" aria-label="Permalink to &quot;什么是BOM?&quot;">​</a></h2><ul><li><p>浏览器对象模型（Browser Object Model），用于支持访问和操作浏览器的窗 口。</p></li><li><p>BOM 的核心对象是 window，它表示浏览器的一个实例。</p><ul><li>使用 window对象可以访问客户端其他对象, 这种关系构成浏览器对象模型。</li><li>navigator：包含客户端有关浏览器的信息</li><li>history：包含浏览器窗口访问过的URL信息</li><li>location：包含当前网页文档的URL信息</li><li>document：包含整个HTML文档，可以用来访问文档内容及其所有页面元素</li></ul></li><li><p>window.open(): 打开新窗口</p><ul><li>参数1：打开新窗口的地址 //默认在新标签页打开一个新窗口</li><li>参数2：选择在新标签页打开还是直接跳转(默认 _blank)</li><li>参数3：新窗口的位置和大小信息</li><li>返回值代表新窗口</li><li>新窗口.close(): 可以把新窗口关闭</li></ul></li><li><p>window.navigator的属性可以读取客户端基本信息</p><ul><li>navigator.userAgent:获取用户代理字符串（客户端的识别码）</li><li>navigator.platform:系统平台</li><li>navigator.onLine：检测是否接入网络</li></ul></li><li><p>location对象存储了与当前文档位置(URL)相关的信息, 简单地说就是网页地址字符串</p><ul><li>属性： <ul><li>href : 声明或获取当前文档完整的URL</li><li>protocol:协议部分包括后缀的冒号。例如http:</li><li>host:主机和端口名称 www.baidu.com:8080</li><li>hostname:主机名称</li><li>port：端口号</li><li>pathname 路径部分</li><li>search：url的查询部分，包括前导问号</li><li>hash：锚部分包括前导 #</li></ul></li><li>方法： <ul><li>reload:刷新</li><li>assign:和href一样 直接跳转</li><li>replace:替换url地址 替换历史记录</li></ul></li></ul></li><li><p>history：控制页面的历史纪录</p><ul><li>back() 返回上一个历史页面</li><li>forward() 返回下一个历史页面</li><li>go():内部书写数字 正的是前进 负的是后退</li></ul></li></ul>',5),n=[u];function a(d,r,p,c,s,m){return i(),e("div",null,n)}const _=l(t,[["render",a]]);export{M as __pageData,_ as default};
