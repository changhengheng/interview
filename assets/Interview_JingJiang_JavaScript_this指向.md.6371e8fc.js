import{_ as i,o as l,c as t,U as a}from"./chunks/framework.e0394e94.js";const f=JSON.parse('{"title":"this 指向","description":"","frontmatter":{},"headers":[],"relativePath":"Interview/JingJiang/JavaScript/this指向.md","filePath":"Interview/JingJiang/JavaScript/this指向.md","lastUpdated":null}'),e={name:"Interview/JingJiang/JavaScript/this指向.md"},n=a('<h1 id="this-指向" tabindex="-1">this 指向 <a class="header-anchor" href="#this-指向" aria-label="Permalink to &quot;this 指向&quot;">​</a></h1><h2 id="常规情况下-函数中的-this-取决于执行函数的方式-四种绑定规则" tabindex="-1">常规情况下, 函数中的 this 取决于执行函数的方式(四种绑定规则) <a class="header-anchor" href="#常规情况下-函数中的-this-取决于执行函数的方式-四种绑定规则" aria-label="Permalink to &quot;常规情况下, 函数中的 this 取决于执行函数的方式(四种绑定规则)&quot;">​</a></h2><ul><li><p>默认绑定:</p><ul><li>直接调用函数 fn()</li><li>严格模式下是 undefined, 非严格模式下是 window 函数内部的this是undefined，全局this还是window</li></ul></li><li><p>隐式绑定:</p><ul><li>通过对象调用函数 obj.fn()</li><li>指向调用函数的对象</li></ul></li><li><p>显式绑定:</p><ul><li>通过 call/apply/bind 方法调用函数 fn.call/apply/bind(obj)</li><li>指向传入的第一个参数对象 obj</li></ul><p>call、apply和bind的区别</p><p>call apply做了两件事</p><p>​ 1、改变this指向</p><p>​ 2、调用函数</p><p>​ fn.call(obj)</p><p>​ 在这一次调用的时候，fn内部this指向是obj</p><p>​ 这一次调用完成，后期fn（） 指向window</p><p>bind</p><p>​ fn.bind(obj)</p><p>​ 1、bind不会直接调用函数</p><p>​ 2、返回一个新的函数，新的函数内部this被永久改变</p><p>​ let fn1 = fn.bind(obj)</p><p>​ fn1() this ---&gt; obj</p></li><li><p>构造函数绑定:</p><ul><li>通过 new 调用函数 new fn()</li><li>指向 new 出来的实例对象</li></ul><p>function person(){} //定义一个函数</p><p>person() //普通函数调用</p><p>new person //构造函数调用</p></li></ul><h2 id="_2-特殊情况" tabindex="-1">2. 特殊情况 <a class="header-anchor" href="#_2-特殊情况" aria-label="Permalink to &quot;2. 特殊情况&quot;">​</a></h2><ul><li>箭头函数 <ul><li>this 指向外部函数的 this</li></ul></li><li>回调函数（普通函数） <ul><li>定时器/ajax/promise/数组遍历相关方法回调 ==&gt; this 默认是 window，严格模式是 undefined</li><li>DOM 事件监听回调 ==&gt; 绑定事件的 DOM 元素</li><li>vue 控制的回调函数(生命周期/methods/watch/computed) ==&gt; this 是组件的实例（内部所有方法都使用 bind 方法绑定成组件实例）</li><li>react的this指向undefinde/组件对象</li></ul></li></ul>',5),p=[n];function s(o,h,d,r,c,u){return l(),t("div",null,p)}const b=i(e,[["render",s]]);export{f as __pageData,b as default};
