import{_ as s,o,c as e,U as a}from"./chunks/framework.e0394e94.js";const f=JSON.parse('{"title":"v-if和v-show","description":"","frontmatter":{},"headers":[],"relativePath":"Interview/JingJiang/Vue/基础/v-if和v-show的区别.md","filePath":"Interview/JingJiang/Vue/基础/v-if和v-show的区别.md","lastUpdated":1689411224000}'),n={name:"Interview/JingJiang/Vue/基础/v-if和v-show的区别.md"},i=a(`<h1 id="v-if和v-show" tabindex="-1">v-if和v-show <a class="header-anchor" href="#v-if和v-show" aria-label="Permalink to &quot;v-if和v-show&quot;">​</a></h1><p>v-if 和 v-show 有什么区别？</p><p><code>v-if</code> 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建， 操作的实际上是 dom 元素的创建或销毁。</p><p><code>v-show</code> 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换， 它操作的是<code>display:none/block</code>属性。</p><p>一般来说， v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。因此，如果需要非常<strong>频繁地切换</strong>，则使用<code>v-show</code> 较好； 如果在运行时条件很少改变，则使用 v-if 较好。</p><p>v-if与v-show的区别</p><ul><li><p>隐藏: v-if干掉标签, v-show通过样式来隐藏</p></li><li><p>重新显示: v-if需要重新创建标签对象, v-show只需要修改样式显示出来就可以</p></li><li><p>v-show重新显示更快, 但隐藏时还占用着内存空间: 以空间换时间</p></li><li><p>v-show更适合切换频繁/需要隐藏的DOM结构比较大</p></li><li><p>使用v-if解决模板中初始解析undefined的bug</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{{</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">c</span><span style="color:#89DDFF;">}}</span></span>
<span class="line"><span style="color:#A6ACCD;">a初始为一个空对象</span></span></code></pre></div></li></ul>`,7),p=[i];function t(l,c,v,r,d,h){return o(),e("div",null,p)}const w=s(n,[["render",t]]);export{f as __pageData,w as default};
