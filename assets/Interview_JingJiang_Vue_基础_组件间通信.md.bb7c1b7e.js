import{_ as t,o as e,c as a,U as o}from"./chunks/framework.e0394e94.js";const m=JSON.parse('{"title":"组件间通信","description":"","frontmatter":{},"headers":[],"relativePath":"Interview/JingJiang/Vue/基础/组件间通信.md","filePath":"Interview/JingJiang/Vue/基础/组件间通信.md","lastUpdated":1689411224000}'),r={name:"Interview/JingJiang/Vue/基础/组件间通信.md"},s=o('<h1 id="组件间通信" tabindex="-1">组件间通信 <a class="header-anchor" href="#组件间通信" aria-label="Permalink to &quot;组件间通信&quot;">​</a></h1><h2 id="插槽" tabindex="-1">插槽： <a class="header-anchor" href="#插槽" aria-label="Permalink to &quot;插槽：&quot;">​</a></h2><p><code>&lt;slot&gt;</code> 在子组件内指定<strong>插槽出口</strong>，写在子组件标签的内容将作为<strong>插槽内容</strong>传递到出口</p><p>插槽可以传递任何模版内容，比如组件、元素等等</p><p>插槽分类：默认插槽、具名插槽、作用域插槽</p><h3 id="默认插槽" tabindex="-1">默认插槽 <a class="header-anchor" href="#默认插槽" aria-label="Permalink to &quot;默认插槽&quot;">​</a></h3><p>本质：一个slot标签</p><p>slot标签内体可以写插槽的默认内容，传递了就使用传递的内容，没传递就是用默认的内容</p><p>默认插槽只能有一个</p><h3 id="具名插槽" tabindex="-1">具名插槽 <a class="header-anchor" href="#具名插槽" aria-label="Permalink to &quot;具名插槽&quot;">​</a></h3><p>本质：带name属性的slot标签（默认插槽的name属性默认为default）</p><p>一个携带v-slot指令的template元素对应一个具名slot，v-slot用来指定插槽名，template用来传递插槽内容</p><p>v-slot可以简写为 #</p><p>如果一个组件同时传接收了默认插槽和具名插槽，所有除了顶层 <code>&lt;template&gt;</code> 节点之外的内容都会被传递给默认插槽</p><h3 id="作用域插槽" tabindex="-1">作用域插槽 <a class="header-anchor" href="#作用域插槽" aria-label="Permalink to &quot;作用域插槽&quot;">​</a></h3><p>本质：通过<strong>回传数据</strong>让插槽的内容可以访问到子组件的状态</p><p>作用域插槽可以使用类似props的语法让父组件接收子组件回传的数据</p><p>默认作用域插槽：回传的数据通过v-slot接收：<code>v-slot=&quot;{ text, count }&quot;</code></p><p>具名作用域插槽：回传的数据也通过v-slot接收：<code>v-slot:name=&quot;slotProps&quot;</code>，简写：<code>#name=&quot;slotProps&quot;</code></p>',19),n=[s];function l(p,i,d,c,_,h){return e(),a("div",null,n)}const q=t(r,[["render",l]]);export{m as __pageData,q as default};
