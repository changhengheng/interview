import{_ as e,o as t,c,O as i}from"./chunks/framework.3d6e08ae.js";const h=JSON.parse('{"title":"interface 和 type 的区别","description":"","frontmatter":{},"headers":[],"relativePath":"Interview/JingJiang/TypeScript/interface和type的区别.md","filePath":"Interview/JingJiang/TypeScript/interface和type的区别.md"}'),a={name:"Interview/JingJiang/TypeScript/interface和type的区别.md"},o=i('<h1 id="interface-和-type-的区别" tabindex="-1">interface 和 type 的区别 <a class="header-anchor" href="#interface-和-type-的区别" aria-label="Permalink to &quot;interface 和 type 的区别&quot;">​</a></h1><ol><li><code>interface</code> 只能定义引用数据类型，不能定义基本数据类型。而 <code>type</code> 都可以；</li><li><code>interface</code> 定义对象类型不够灵活，<code>type</code> 都可以；</li><li><code>type</code> 声明的类型不能重名，<code>interface</code> 声明的重命名会声明合并；</li><li>两者继承的方法不同；</li></ol><ul><li><code>interface</code> 使用 extends 继承</li><li><code>type</code> 使用 &amp; 关键字</li></ul><ol start="5"><li>一般开发中对象类型用 <code>interface</code> 定义，数组类型用 <code>type</code></li></ol>',4),n=[o];function r(d,l,p,_,s,f){return t(),c("div",null,n)}const m=e(a,[["render",r]]);export{h as __pageData,m as default};
