import{_ as s,o as a,c as o,O as l}from"./chunks/framework.3d6e08ae.js";const h=JSON.parse('{"title":"localStorage 和 sessionStorage","description":"","frontmatter":{},"headers":[],"relativePath":"Interview/JingJiang/自己补充的/localStorage和sessionStorage.md","filePath":"Interview/JingJiang/自己补充的/localStorage和sessionStorage.md"}'),e={name:"Interview/JingJiang/自己补充的/localStorage和sessionStorage.md"},n=l(`<h1 id="localstorage-和-sessionstorage" tabindex="-1">localStorage 和 sessionStorage <a class="header-anchor" href="#localstorage-和-sessionstorage" aria-label="Permalink to &quot;localStorage 和 sessionStorage&quot;">​</a></h1><h2 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h2><p>localStorage和sessionStorage 是h5新增的一种本地存储数据方式，本质是一个小型数据库，可以在前端使用对象去操作。存储量大小是5M（最新版谷歌浏览器是10M）</p><p>localStorage保存数据是永久保存，关闭浏览器或者刷新浏览器，数据还在 sessionStorage 不是永久保存，会话存储。关闭浏览器数据清空</p><h4 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-label="Permalink to &quot;API&quot;">​</a></h4><p>存储： localStorage.setItem(键，值) 增 获取： localStorage.getItem(键) 查 能获取到就获取到，获取不到返回null 删除： localStorage.removeItem(键) 删除某个键值对 改和增一样，第一次就是增后面就是改 清空： localStorage.clear()</p><h5 id="对象类型转字符串的规则" tabindex="-1">对象类型转字符串的规则 <a class="header-anchor" href="#对象类型转字符串的规则" aria-label="Permalink to &quot;对象类型转字符串的规则&quot;">​</a></h5><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">对象	{}     【object  Object】</span></span>
<span class="line"><span style="color:#A6ACCD;">函数	function(){}   &#39;function(){}&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">数组	[1,2,3]        &#39;1,2,3&#39;</span></span></code></pre></div><h4 id="坑" tabindex="-1">坑 <a class="header-anchor" href="#坑" aria-label="Permalink to &quot;坑&quot;">​</a></h4><p>这两个东西存储数据，默认数据都会转化为字符串,以后存储基本数据都是直接加引号变为字符串 存储对象数据，数据就变了后期取出来就不是我们要的东西了 因此在存储对象数据的时候，一定要自己强制转化为json串。这样它就不会再改变我的数据了</p><h4 id="json对象的方法" tabindex="-1">Json对象的方法 <a class="header-anchor" href="#json对象的方法" aria-label="Permalink to &quot;Json对象的方法&quot;">​</a></h4><p>JSON.stringify(val)，用于将js对象转换为 JSON 字符串</p><p>JSON.parse(val)，用于将JSON字符串转为一个对象</p><h2 id="_1-1-什么是cookie" tabindex="-1">1.1 什么是cookie <a class="header-anchor" href="#_1-1-什么是cookie" aria-label="Permalink to &quot;1.1 什么是cookie&quot;">​</a></h2><ul><li>HTTP协议本身是无状态的。即服务器无法判断用户身份。</li><li>Cookie实际上是一小段的文本信息（key-value格式）。‘</li><li>客户端向服务器发起请求，如果服务器需要记录该用户状态，就使用response向客户端浏览器颁发一个Cookie。客户端浏览器会把Cookie保存起来。当浏览器再请求该网站时，浏览器把请求的网址连同该Cookie一同提交给服务器。服务器检查该Cookie，以此来辨认用户状态。</li></ul><h3 id="cookie作用" tabindex="-1">cookie作用 <a class="header-anchor" href="#cookie作用" aria-label="Permalink to &quot;cookie作用&quot;">​</a></h3><ul><li>解决http无状态</li><li>储存少量文本</li></ul><h3 id="cookie机制" tabindex="-1">cookie机制 <a class="header-anchor" href="#cookie机制" aria-label="Permalink to &quot;cookie机制&quot;">​</a></h3><ul><li>客户端发送请求到服务端</li><li>服务端返回成功响应，响应头携带cookie，cookie中保存用户的信息</li><li>客户端接收到服务端的响应，并把cookie存放在了客户端储存</li><li>客户端再次请求服务端，会自动的携带上所有的cookie，放在自己的请求头上</li><li>服务端接收到的请求头中的cookie，判断是哪一个用户，从而作出对应响应</li></ul><h3 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h3><ul><li>设置cookie的时候，如果不设置时间，则代表临时存储，当浏览器关闭后，就会消失</li><li>设置时间可以通过expires或max-age（推荐） max-age的时间单位是毫秒</li><li>httpOnly属性是设置仅仅对服务端可见，仅仅服务端可以操作</li><li>在客户端可以使用读写二合一的方法操作cookie： document.cookie</li></ul><h3 id="express中使用cookie" tabindex="-1">express中使用cookie <a class="header-anchor" href="#express中使用cookie" aria-label="Permalink to &quot;express中使用cookie&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//1.引入cookie处理的第三方中间件</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> cookieParser </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">cookie-parser</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//挂载在app上</span></span>
<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">use</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">cookieParser</span><span style="color:#A6ACCD;">())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//2.设置cookie</span></span>
<span class="line"><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">cookie</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">key</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">value</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">httpOnly</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// expires: new Date(Date.now() + 1000 * 60 * 60 * 24 * 7),//expires是http1.0提供的，需要设置过期的时间</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">maxAge</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">60</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">60</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">24</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">7</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//maxAge是http1.1版本提供的，直接设置设置的时长即可</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//3. 获取cookie</span></span>
<span class="line"><span style="color:#A6ACCD;">req</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">cookies</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//4.删除cookie</span></span>
<span class="line"><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">clearCookie</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">key</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)Copy to clipboardErrorCopied</span></span></code></pre></div><h3 id="cookie特点" tabindex="-1">cookie特点 <a class="header-anchor" href="#cookie特点" aria-label="Permalink to &quot;cookie特点&quot;">​</a></h3><ul><li>cookie保存在浏览器端，内存只有4kb，并且还有个数限制（个别浏览器限制50左右）</li><li>cookie是按照域名保存的</li><li>cookie会随着http请求发送到服务端，如果cookie过多可能造成服务端压力</li><li>cookie发送是明文发送的</li></ul>`,25),p=[n];function t(c,r,i,y,C,D){return a(),o("div",null,p)}const F=s(e,[["render",t]]);export{h as __pageData,F as default};
