import{_ as e,o as t,c as i,O as a}from"./chunks/framework.3d6e08ae.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Interview/JingJiang/新增内容/echarts.md","filePath":"Interview/JingJiang/新增内容/echarts.md"}'),s={name:"Interview/JingJiang/新增内容/echarts.md"},r=a('<p>原生echarts：</p><ol><li>创建容器</li><li>init一个echarts 实例</li><li>对这个实例进行配置</li></ol><p>缺陷： 1.数据分同步和异步，如果数据是异步回来的，需要set两次才行 2.自己写响应式 window.onresize里调resizeAPI重新渲染 onresize事件触发频率非常高，节流 优点： 任意项目都可用 基本配置： 3个：xAxis、yAxis、series xAxis：{ show:false data type min:最小值 max：最大值 } yAxis:{ show:false data type:可用于交换x和y轴 } tooltip:{ trigger:提示，配合series的name使用 }</p><ul><li>series type:&quot;line&quot;、&quot;pie&quot;、&quot;bar&quot; 对象和数组 color 其他配置： grid：{ top left right bottom }</li></ul><h2 id="vue-echarts" tabindex="-1">vue-echarts <a class="header-anchor" href="#vue-echarts" aria-label="Permalink to &quot;vue-echarts&quot;">​</a></h2><p>优点： 即时数据是异步，也不需要set两次 可以配置响应式：autoresize（布尔值）</p><p>2023-7-13 10:25:55</p><p>强制触发视图更新，只要页面有数据更改即可，这样就不用重新请求列表数据，降低请求所需的开销</p><ul><li>前台项目</li><li>大屏展示当前时间</li></ul>',9),o=[r];function l(n,c,p,_,h,u){return t(),i("div",null,o)}const f=e(s,[["render",l]]);export{m as __pageData,f as default};
