import{_ as l,o as i,c as e,U as o}from"./chunks/framework.e0394e94.js";const h=JSON.parse('{"title":"字符串方法总结","description":"","frontmatter":{},"headers":[],"relativePath":"Interview/JingJiang/自己补充的/JS字符串方法总结.md","filePath":"Interview/JingJiang/自己补充的/JS字符串方法总结.md","lastUpdated":null}'),d={name:"Interview/JingJiang/自己补充的/JS字符串方法总结.md"},c=o('<h1 id="字符串方法总结" tabindex="-1">字符串方法总结 <a class="header-anchor" href="#字符串方法总结" aria-label="Permalink to &quot;字符串方法总结&quot;">​</a></h1><p>全都是String原型上的方法，可供所有的实例化对象调用：</p><ul><li><code>concat</code>： <ul><li>合并字符串，可以把多个字符串合并在一起，返回一个新的字符串</li><li>现代浏览器对 <code>+</code> 拼接字符串做了优化，所以直接使用 <code>+</code> 会更好</li><li>传递一至多个参数</li><li>返回一个新字符串</li></ul></li><li><code>toLowerCase()</code><ul><li>让字符串全部变成小写</li><li>返回一个新字符串</li></ul></li><li><code>toUpperCase()</code><ul><li>让字符串全部变成大写</li><li>返回一个新字符串</li></ul></li></ul><p><strong>字符串查找</strong>：</p><ul><li><p><code>indexOf</code> 和 <code>lastIndexOf</code></p><ul><li>查找某个字符串在另一个字符串中第一次出现的下标</li><li>参数是要搜索的子字符串</li><li><code>indexOf</code> 是从前向后查</li><li><code>lastIndexOf</code> 是从后向前查</li><li>如果查询不到则返回 <code>-1</code></li></ul></li><li><p><code>charAt()</code></p><ul><li>根据<strong>下标</strong>查询对应的字符</li><li>也可以通过<code>[]</code>查询下标对应的字符串</li><li><code>charAt</code> 查询不到则返回一个空串 <code>[]</code>查询不到则返回undefined</li></ul></li><li><p><code>search(正则)</code></p><ul><li>和 <code>indexOf</code> 类似，也是搜索某个字符串在另一个字符串中第一次出现的位置</li><li>找到返回索引，找不到返回-1</li></ul></li><li><p><code>match(正则)</code></p><ul><li>查询字符串中能和正则匹配上的值 组成一个数组返回</li></ul></li></ul><p><strong>截取字符串</strong></p><ul><li><p><code>subStr()</code></p><ul><li>截取字符串 返回截取的字符串</li><li>参数1：开始截取的位置(如果为负 则倒着数)</li><li>参数2：截取字符串的长度(如果忽略 则代表截取到最后)</li></ul></li><li><p><code>subString()</code></p><ul><li>截取字符串 返回截取的字符串</li><li>参数1：开始截取的位置(如果为负 则默认0)</li><li>参数2：截取的结束位置(不包含结束位置)(如果小于参数1，则和参数1交换位置)(如果忽略则截取到最后)</li></ul></li><li><p><code>slice()</code></p><ul><li>截取字符串 返回截取的字符串</li><li>参数1：开始截取的位置(如果为负，则倒着数)</li><li>参数2：结束截取的位置(不包含)(如果为负，则倒着数)</li></ul></li><li><p><code>split()</code></p><ul><li>字符串转数组 <ul><li>如果不传递参数，则整个字符串是数组的一个值；</li><li>传递一个空串，则每一个字符都是数组的一个值</li></ul></li><li>其他可以以传入的参数（字符串类型）为切割</li></ul></li><li><p><code>trim</code>：去除字符串两端的空格</p></li><li><p><code>trimStart</code>：去除字符串开头的空格</p></li><li><p><code>trimEnd</code>：去除字符串结尾的空格</p></li></ul><p><strong>ES6新增：</strong></p><ul><li><code>startsWith()</code>：判断开头有没有包含某个字符串</li><li><code>endsWith()</code>：判断结尾有没有包含某个字符串</li><li><code>includes</code>判断字符串是否包含某个字符串</li><li><code>repeat</code>重复当前的字符串，可用参数（数字）规定次数</li><li><code>padStart()</code>当字符串不够某个长度的时候，在前边补充任意字符。参数一是填充的目标长度，参数二是填充的字符，默认空串</li><li><code>padEnd()</code>当字符串不够某个长度的时候，在后边补充任意字符。参数一是填充的目标长度，参数二是填充的字符，默认空串</li></ul>',9),t=[c];function a(n,r,p,s,u,_){return i(),e("div",null,t)}const f=l(d,[["render",a]]);export{h as __pageData,f as default};
