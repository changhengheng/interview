import{_ as e,o as l,c as i,O as a}from"./chunks/framework.3d6e08ae.js";const g=JSON.parse('{"title":"Webpack 优化","description":"","frontmatter":{},"headers":[],"relativePath":"Interview/JingJiang/gongchenghua/webpack优化.md","filePath":"Interview/JingJiang/gongchenghua/webpack优化.md"}'),c={name:"Interview/JingJiang/gongchenghua/webpack优化.md"},o=a('<h1 id="webpack-优化" tabindex="-1">Webpack 优化 <a class="header-anchor" href="#webpack-优化" aria-label="Permalink to &quot;Webpack 优化&quot;">​</a></h1><ul><li>提升开发体验 <ul><li>打包时生成一些映射文件（.map文件）记录打包前后代码对应的位置，代码报错时会反向查找映射文件找到源码中的位置进行报错</li><li>开发时使用 <code>Source Map</code> 让代码报错能有更加准确的错误提示。</li><li>在生产阶段我们可以配置不生成map文件减小打包的体积</li></ul></li><li>提升 webpack 打包构建速度 <ul><li>模块热更新： <ul><li>使用 <code>HotModuleReplacement</code> 让开发时只重新 编译打包 更新了的代码，不变的代码使用缓存，从而使更新速度更快。</li></ul></li><li>排除、引入模块 <ul><li>使用 <code>Include/Exclude</code> 排除或只检测某些文件，处理的文件更少，速度更快。</li></ul></li><li>减少代码体积 <ul><li>摇树：使用 <code>Tree Shaking</code> 剔除了没有使用的多余代码，让代码体积更小。</li></ul></li></ul></li><li>优化代码运行性能 <ul><li>代码分割： <ul><li>使用 <code>Code Split</code> 对代码进行分割成多个 js 文件，从而使单个文件体积更小，并行加载 js 速度更快。并通过 import 动态导入语法进行按需加载，从而达到需要使用时才加载该资源，不用时不加载资源。</li></ul></li><li>预加载模块： <ul><li>使用 <code>Preload / Prefetch</code> 对代码进行提前加载，等未来需要使用时就能直接使用，从而用户体验更好。</li></ul></li></ul></li></ul>',2),t=[o];function n(d,r,u,_,p,s){return l(),i("div",null,t)}const k=e(c,[["render",n]]);export{g as __pageData,k as default};
