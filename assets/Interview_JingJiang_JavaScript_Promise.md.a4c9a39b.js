import{_ as i,o as e,c as l,U as o}from"./chunks/framework.e0394e94.js";const P=JSON.parse('{"title":"Promise","description":"","frontmatter":{},"headers":[],"relativePath":"Interview/JingJiang/JavaScript/Promise.md","filePath":"Interview/JingJiang/JavaScript/Promise.md","lastUpdated":1689495355000}'),r={name:"Interview/JingJiang/JavaScript/Promise.md"},s=o('<h1 id="promise" tabindex="-1">Promise <a class="header-anchor" href="#promise" aria-label="Permalink to &quot;Promise&quot;">​</a></h1><ul><li><p>是什么？Promise是一个包含了状态和结果的对象</p></li><li><p>三种状态</p><ul><li><code>pending</code> 等待状态</li><li><code>resolved / fulfilled</code> 成功状态</li><li><code>rejected</code> 失败状态</li></ul></li><li><p>promise状态只能变化一次，只能：</p><ul><li><code>pending</code> --&gt; <code>resolved</code></li><li><code>pending</code> --&gt; <code>rejected</code></li><li>状态发生变化后不能再次改变</li></ul></li><li><p>改变 promise 的状态并传递结果</p><ul><li>调用 <code>resolve()</code>, 改成成功状态</li><li>调用 <code>reject()</code>, 改为失败状态</li></ul></li><li><p>promise 实例对象上的方法</p><ul><li><code>then</code> 接受两个回调（一般只接受一个），第一个是成功回调，第二个是失败回调</li><li><code>catch</code> 接受一个回调，是失败回调</li><li><code>finally</code> 接受一个回调，不管成功/失败都会触发</li></ul></li><li><p>promsie的作用：</p><ol><li>解决回调地狱</li><li>指定回调很灵活（请求前 请求后 拿到结果之后都可以指定）</li></ol></li><li><p>Promise 构造函数上的方法</p><ul><li><p>Promise.resolve()：返回一个成功的 promise 对象，值为undefined</p></li><li><p>Promise.reject()：返回一个失败的 promise 对象，值为undefined</p></li><li><p>Promise.all():</p><ul><li>功能：可以将多个promise的实例包装成一个新的Promise实例</li><li>参数：promise对象的数组</li><li>返回值： <ul><li>当所有的promise实例都成功的时候，Promise.all()返回成功状态的promise对象，值为所有传入实例的结果数组</li><li>如果所有的实例中，有一个失败了，则all直接失败的promise对象，值为失败的promise实例的值</li></ul></li><li>应用：想要在每一个promise都执行成功之后，再去执行其他任务。</li></ul></li><li><p>Promise.allSettled():</p><ul><li>功能：可以将多个promise的实例包装成一个新的Promise实例</li><li>参数：promise对象的数组</li><li>返回值：allSettled会等待所有的promise对象全部执行完成，并直接返回一个成功的promise对象，promise对象的值是所有的promise实例的结果形成的一个数组</li><li>应用：想要知道每一个promise的执行结果，可以使用Promise.allSettled()</li></ul></li><li><p>Promise.race():</p><ul><li>参数：promise对象的数组</li><li>功能：可以将多个promise的实例包装成一个新的Promise实例</li><li>返回值：返回一个promise对象，一旦迭代器中某个promise实例成功或者失败，则race直接返回成功或者失败，值为第一个先得到结果的实例的值</li><li>应用：想要知道第一个promise的执行结果，可以使用Promise.race()</li></ul></li></ul></li><li><p>使用场景：</p><ul><li>在项目中一般是使用 axios 发送请求时会使用，返回值是一个 promise 对象，结合 async await 来处理</li><li>如果同时要发送多个请求的话，可以使用 Promise.all() 方法来处理</li><li>后台管理页面请求初始化状态数据的时候，使用promsie.all</li></ul></li></ul>',2),p=[s];function a(m,t,c,d,n,u){return e(),l("div",null,p)}const f=i(r,[["render",a]]);export{P as __pageData,f as default};
