import{_ as t,o as d,c as e,U as l}from"./chunks/framework.e0394e94.js";const c=JSON.parse('{"title":"数组常用方法总结","description":"","frontmatter":{},"headers":[],"relativePath":"Interview/JingJiang/自己补充的/JS数组方法总结.md","filePath":"Interview/JingJiang/自己补充的/JS数组方法总结.md","lastUpdated":null}'),a={name:"Interview/JingJiang/自己补充的/JS数组方法总结.md"},r=l('<h1 id="数组常用方法总结" tabindex="-1">数组常用方法总结 <a class="header-anchor" href="#数组常用方法总结" aria-label="Permalink to &quot;数组常用方法总结&quot;">​</a></h1><table><thead><tr><th>方法</th><th>作用</th><th style="text-align:left;">参数</th><th>返回值</th><th style="text-align:left;">是否改变原数组</th></tr></thead><tbody><tr><td>push</td><td>给数组的末尾添加值（一个或多个）（把push的参数依次添加到数组末尾）</td><td style="text-align:left;">要添加的值</td><td>返回改变后的数组的长度</td><td style="text-align:left;">是</td></tr><tr><td>pop</td><td>删除数组的最后一个元素</td><td style="text-align:left;">无</td><td>返回被删除的值</td><td style="text-align:left;">是</td></tr><tr><td>shift</td><td>删除数组的第一个元素</td><td style="text-align:left;">无</td><td>返回被删除的值</td><td style="text-align:left;">是</td></tr><tr><td>unshift</td><td>给数组的开头添加值（一个或多个）（把unshift的参数依次添加到数组开头）</td><td style="text-align:left;">要添加的值</td><td>返回改变后的数组的长度</td><td style="text-align:left;">是</td></tr><tr><td>splice</td><td>删除元素；添加元素；替换元素；</td><td style="text-align:left;">参数1：选中一个元素的下标（如果为负，则倒着数，最后一个元素的下标是 <code>-1</code>）；参数2：要删除的元素的长度（可以为0）；剩余参数：依次插入到选中元素下标位置的值；</td><td>返回被删除的元素组成的新数组</td><td style="text-align:left;">是</td></tr><tr><td>concat</td><td>在数组的末尾添加一个或多个值；如果添加的值是一个数组，则可以拆开一层数组；</td><td style="text-align:left;">要添加的值</td><td>返回一个添加值后的新数组</td><td style="text-align:left;">否</td></tr><tr><td>slice</td><td>截取数组</td><td style="text-align:left;">参数1：开始截取的位置；参数2：截取元素的结束位置（不包含结束位置的元素）；参数1和参数2如果为负，则都是倒着数，最后一个元素下标为-1；</td><td>返回一个截取的元素组成的新数组</td><td style="text-align:left;">否</td></tr><tr><td>reverse</td><td>倒序输出一个数组</td><td style="text-align:left;">无</td><td>返回原数组的引用</td><td style="text-align:left;">是</td></tr><tr><td>sort</td><td>对数组元素进行排序</td><td style="text-align:left;">当sort没有任何参数的时候，把每个值当做字符串（根据ASCII代码）进行排序；sort可以接受一个参数是一个回调函数，回调函数接受两个参数，就是每次回调函数执行的时候要比较的两个值，如果当次回调函数返回负值，则两个值进行交换；</td><td>返回原数组的引用</td><td style="text-align:left;">是</td></tr><tr><td>toString</td><td>数组转字符串（去中括号加引号）</td><td style="text-align:left;">无</td><td>返回数组元素组成的字符串，以逗号为间隔符</td><td style="text-align:left;">否</td></tr><tr><td>join</td><td>数组转字符串；如果不传递任何参数，则和toString类似，去中括号加引号；</td><td style="text-align:left;">join的参数是对数组转字符串中间隔符逗号的替换；如果不想让得到的字符串有任何间隔，参数可以是一个空串；</td><td>返回处理后形成的字符串</td><td style="text-align:left;">否</td></tr><tr><td>indexOf</td><td>检测某个元素在数组中第一次出现的下标，如果没有检测到，则返回-1；对于对象类型来说，比较是地址的比较；</td><td style="text-align:left;">要检测的元素</td><td>返回元素在数组中的下标，如果没有检测到，返回-1</td><td style="text-align:left;">否</td></tr><tr><td>every</td><td>遍历数组的每一个值，判断是否都符合某个条件，返回布尔值</td><td style="text-align:left;">参数是一个回调函数，回调函数接受三个参数：遍历得到的当前元素，当前元素对应的下标，当前数组；如果每个元素执行的回调函数都返回true，则every方法返回true，如果某个回调函数返回false，则停止遍历，ervey方法直接返回false；（逻辑和与操作符完全一样）</td><td>布尔值</td><td style="text-align:left;">否</td></tr><tr><td>some</td><td>遍历数组的每一个值，判断是否有符合某个条件，返回布尔值</td><td style="text-align:left;">参数是一个回调函数，回调函数接受三个参数：遍历得到的当前元素，当前元素对应的下标，当前数组；如果每个元素执行的回调函数有一个返回true，则some方法返回true，则停止遍历；如果所有回调函数返回false，some方法直接返回false；（逻辑和或操作符完全一样）</td><td>布尔值</td><td style="text-align:left;">否</td></tr><tr><td>forEach</td><td>遍历数组，没有返回值</td><td style="text-align:left;">参数是一个回调函数，回调函数也不需要返回值，回调函数内就是的遍历数组的每一个值执行的代码；回调函数接受三个参数：遍历得到的当前元素，当前元素对应的下标，当前数组；</td><td>undefined</td><td style="text-align:left;">否</td></tr><tr><td>map</td><td>映射数组</td><td style="text-align:left;">参数是一个回调函数，回调函数接受三个参数：遍历得到的当前元素，当前元素对应的下标，当前数组；</td><td>返回一个新数组，和原数组的长度保持一致；新数组的每一个元素，就是对应被map遍历元素进入回调函数后的返回值；</td><td style="text-align:left;">否</td></tr><tr><td>filter</td><td>过滤数组元素</td><td style="text-align:left;">参数是一个回调函数，回调函数接受三个参数：遍历得到的当前元素，当前元素对应的下标，当前数组；如果回调函数返回true，则当前元素符合条件；</td><td>返回一个符合筛选条件的元素组成的一个新数组</td><td style="text-align:left;">否</td></tr><tr><td>reduce</td><td>万能方法，根据数组的值进行累加（不一定是值）操作。</td><td style="text-align:left;">reduce接受一个回调函数和一个初始值；回调函数的参数有4个：初始值或者上一次回调函数的返回值，当前数组进入回调函数的元素，进入回调函数元素的下标，当前数组的引用；如果没有书写初始值，则数组的第一个值作为初始值，数组的第二个值第一次进入回调函数；</td><td>返回最后一次回调函数的返回值</td><td style="text-align:left;">否</td></tr></tbody></table>',2),s=[r];function n(i,f,g,o,x,y){return d(),e("div",null,s)}const h=t(a,[["render",n]]);export{c as __pageData,h as default};
