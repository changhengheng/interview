import{_ as s,o as a,c as n,U as l}from"./chunks/framework.e0394e94.js";const A=JSON.parse('{"title":"谈谈 ajax","description":"","frontmatter":{},"headers":[],"relativePath":"Interview/JingJiang/fuwuduan/谈谈ajax和xhr.md","filePath":"Interview/JingJiang/fuwuduan/谈谈ajax和xhr.md","lastUpdated":null}'),p={name:"Interview/JingJiang/fuwuduan/谈谈ajax和xhr.md"},o=l(`<h1 id="谈谈-ajax" tabindex="-1">谈谈 ajax <a class="header-anchor" href="#谈谈-ajax" aria-label="Permalink to &quot;谈谈 ajax&quot;">​</a></h1><ul><li>new 调用 XMLHttpRequest() 创建 xhr 对象</li><li>调用 open 初始化一个请求，参数是请求方式和请求地址</li><li>调用 send 发送一个请求（body 请求体参数）</li><li>绑定 onreadystatechange 事件，处理服务端返回的结果（readyState 属性值发生变化，触发 readystatechange 事件，调用它的事件函数）</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>readyState 属性返回一个 XMLHttpRequest 代理当前所处的状态</p></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 1. 创建 xhr 对象</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> xhr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">XMLHttpRequest</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">	</span><span style="color:#676E95;font-style:italic;">// 2. 设置请求方法和请求地址</span></span>
<span class="line"><span style="color:#A6ACCD;">	xhr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">open</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">GET</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http://xxx/xxx</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">	</span><span style="color:#676E95;font-style:italic;">// 3. 发送请求</span></span>
<span class="line"><span style="color:#A6ACCD;">	xhr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">	</span><span style="color:#676E95;font-style:italic;">// 4. 绑定事件，处理服务端返回的结果</span></span>
<span class="line"><span style="color:#A6ACCD;">	xhr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onreadystatechange</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	    </span><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	     判断 readyState，等于 4 请求才完成了（但是不知道成功 / 失败）</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">		 0 － （未初始化）还没有调用 send() 方法</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	     1 － （载入）已调用 send() 方法，正在发送请求</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	     2 － （载入完成）send() 方法执行完成，已经接收到全部响应内容</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	     3 － （交互）正在解析响应内容</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	     4 － （完成）响应内容解析完成，可以在客户端调用了</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	  */</span></span>
<span class="line"><span style="color:#F07178;">	    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">readyState</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">4</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">	        </span><span style="color:#676E95;font-style:italic;">// 判断响应状态码是否 2xx</span></span>
<span class="line"><span style="color:#F07178;">	        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">status</span><span style="color:#89DDFF;">&gt;=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">200</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">status</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">300</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">	            </span><span style="color:#676E95;font-style:italic;">// 成功</span></span>
<span class="line"><span style="color:#F07178;">	            </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">response</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	        </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">	            </span><span style="color:#676E95;font-style:italic;">// 失败</span></span>
<span class="line"><span style="color:#F07178;">	        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">	    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>onReadyStateChange 和 响应状态码 4 的功能 可以用 load 事件代替</p><p>window.load 事件：load 事件在整个页面及所有依赖资源如样式表和图片都已完成加载时触发。它与 DOMContentLoaded 不同，后者只要页面 DOM 加载完成就触发，无需等待依赖资源的加载。</p></div>`,5),t=[o];function e(c,r,y,F,i,D){return a(),n("div",null,t)}const d=s(p,[["render",e]]);export{A as __pageData,d as default};
