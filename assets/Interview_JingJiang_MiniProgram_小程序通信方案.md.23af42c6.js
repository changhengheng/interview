import{_ as o,o as e,c as n,k as a,a as p,t,U as s}from"./chunks/framework.e0394e94.js";const A=JSON.parse('{"title":"小程序通信方案","description":"","frontmatter":{},"headers":[],"relativePath":"Interview/JingJiang/MiniProgram/小程序通信方案.md","filePath":"Interview/JingJiang/MiniProgram/小程序通信方案.md","lastUpdated":1689411224000}'),c={name:"Interview/JingJiang/MiniProgram/小程序通信方案.md"},r=s(`<h1 id="小程序通信方案" tabindex="-1">小程序通信方案 <a class="header-anchor" href="#小程序通信方案" aria-label="Permalink to &quot;小程序通信方案&quot;">​</a></h1><p>小程序通信都指的是给页面通信，因为小程序中是以页面为基础的</p><h2 id="组件通信-组件和页面通信" tabindex="-1">组件通信：组件和页面通信 <a class="header-anchor" href="#组件通信-组件和页面通信" aria-label="Permalink to &quot;组件通信：组件和页面通信&quot;">​</a></h2><ol><li>properties</li></ol><p>传递：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 传动态数据</span></span>
<span class="line"><span style="color:#FFCB6B;">bind</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> xxx </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">xxx</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 等价于 vue 的 v-bind</span></span>
<span class="line"><span style="color:#A6ACCD;">xxx </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">{{xxx}}</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 传死数据</span></span>
<span class="line"><span style="color:#A6ACCD;">xxx </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">xxx</span><span style="color:#89DDFF;">&quot;</span></span></code></pre></div><p>接收：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 组件内</span></span>
<span class="line"><span style="color:#FFCB6B;">properties</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">xxx</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Array</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>动态数据都带 { { } }</p></div><ol start="2"><li>自定义事件</li></ol>`,10),i=s(`<p>父组件定义事件回调： <code>methods:{xxx(){}}</code></p><p>子组件触发事件： <code>this.triggerEvent(&#39;xxx&#39;, &#39;要传递的数据&#39;)</code></p><p>父组件接收传递的数据： <code>event.detail</code></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>组件自带 methods，函数要写在 methods 里</p></div><h2 id="全局通信-全局-相当于-vuex-和页面通信" tabindex="-1">全局通信：全局（相当于 vuex）和页面通信 <a class="header-anchor" href="#全局通信-全局-相当于-vuex-和页面通信" aria-label="Permalink to &quot;全局通信：全局（相当于 vuex）和页面通信&quot;">​</a></h2><ol><li>globalData（刷新数据会丢失）</li></ol><p>定义：创建应用（调 <code>App()</code> ）时，可以定义一个 <code>globalData</code> （自定义的，不是固定的）作为全局状态数据管理工具，任何页面当中都可以使用其中的数据</p><p>获取：</p><ol><li><p><code>let app = getApp()</code>，拿到应用对象，全局 API，在任何页面中都可以使用</p></li><li><p><code>console.log(app.globalData)</code>，拿到 globalData 数据</p></li><li><p>直接 <code>.</code> 去获取或者修改， 全局数据不需要调用 setData</p></li><li><p>修改后，任何使用了该数据的页面的数据都会更新</p></li><li><p>storage（持久化存储，一般用来存 token）</p></li></ol><p>storage 上限为 10MB</p><ul><li>wx.setStorageSync(&quot;xxx&quot;, xxx) 将数据存储在本地缓存中指定的 key 中。</li><li>wx.getStorageSync(&quot;xxx&quot;) 从本地缓存中同步获取指定 key 的内容。</li><li>wx.removeStorageSync(string key) 清除指定 key 的缓存，只清除一条</li><li>wx.clearStorageSync() 清除所有本地缓存</li></ul><ol start="3"><li>pubsub</li></ol><p>第三方包</p><h2 id="页面通信-页面和页面通信" tabindex="-1">页面通信：页面和页面通信 <a class="header-anchor" href="#页面通信-页面和页面通信" aria-label="Permalink to &quot;页面通信：页面和页面通信&quot;">​</a></h2><ol><li>getCurrentPages() 获取当前页面栈组成的数组，第一个元素为首页，最后一个元素是当前页面。</li></ol><p>使用：当前页面 onLoad() 里 通过 getCurrentPages() 拿上一个页面</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 常用代码片段</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">setData</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">xxx</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> arr[arr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">xxx</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><ol start="2"><li>路由</li></ol><p>redirectTo：需要跳转的应用内非 tabBar 的页面的路径 (代码包路径), 路径后可以带参数。参数与路径之间使用 ? 分隔，参数键与参数值用 = 相连，不同参数用 &amp; 分隔；如&#39;path?key=value&amp;key2=value2&#39;</p><p>reLaunch：需要跳转的应用内非 tabbar 页面，路径后可以带参数。参数与路径之间使用? 分隔，参数键与参数值用 = 相连，不同参数用 &amp; 分隔；如&#39;path?key=value&amp;key2=value2&#39;</p><p>navigateTo：需要跳转的应用内非 tabBar 的页面的路径 (代码包路径), 路径后可以带参数。参数与路径之间使用 ? 分隔，参数键与参数值用 = 相连，不同参数用 &amp; 分隔；如&#39;path?key=value&amp;key2=value2&#39;</p><p>接收：onLoad 的默认参数 options 里接收</p>`,22);function y(l,D,d,x,C,u){return e(),n("div",null,[r,a("p",null,[p("父组件绑定事件： "),a("code",null,'bind:xxx = "'+t(l.xxx)+'"',1)]),i])}const g=o(c,[["render",y]]);export{A as __pageData,g as default};
