import{_ as s,o as a,c as l,U as n}from"./chunks/framework.e0394e94.js";const A=JSON.parse('{"title":"项目优化","description":"","frontmatter":{},"headers":[],"relativePath":"Interview/JingJiang/resume/项目优化.md","filePath":"Interview/JingJiang/resume/项目优化.md","lastUpdated":null}'),p={name:"Interview/JingJiang/resume/项目优化.md"},o=n(`<h1 id="项目优化" tabindex="-1">项目优化 <a class="header-anchor" href="#项目优化" aria-label="Permalink to &quot;项目优化&quot;">​</a></h1><h2 id="代码层面的优化" tabindex="-1">代码层面的优化 <a class="header-anchor" href="#代码层面的优化" aria-label="Permalink to &quot;代码层面的优化&quot;">​</a></h2><ul><li>v-if 和 v-show，频繁用 v-show，不频繁用 v-if</li><li>页面比较长的表达式，或者使用了多次表达式，用 computed 缓存</li><li>vue 中遇到大量数据可以使用 Object.freeze 冻结数据（这样能让内部数据不被数据劫持，不会生产 dep 对象等，节省内存提升性能）</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">data</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        userList</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> []​</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#FFCB6B;">methods</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">async</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">getUserList</span><span style="color:#F07178;">() </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">reqxxx</span><span style="color:#F07178;">()​</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">userList</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">freeze</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">)​</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ul><li>vue 中遇到不涉及用户界面更新的数据可以直接绑定到 this 上（这个数据也不会被数据劫持，比如定时器的返回值）</li><li>使用 keep-alive 缓存路由组件，切换性能更好，但是要注意数据是否需要及时更新（activated 生命周期）</li><li>v-for 遍历设置 key ，且在 vue2 中避免同时使用 v-if，vue3 中可以。</li><li>需要大量数据渲染，要么分页，要么虚拟长列表优化（商品数据展示）</li><li>前端分页</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">page</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">limit</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">longArr</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">2000000</span><span style="color:#A6ACCD;"> 条数据]</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">computed</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">arr</span><span style="color:#F07178;">() </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">longArr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">slice</span><span style="color:#F07178;">((</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">page</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">limit</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">page</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">limit</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)​</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span></code></pre></div><ul><li>图片懒加载 <ul><li>进入可视区域内显示加载图片</li><li>图片资源回来之前加载 loading 图</li></ul></li><li>路由懒加载</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> xxx </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> xxx</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">import</span><span style="color:#A6ACCD;">(xxx)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">component</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">import</span><span style="color:#A6ACCD;">(xxxx)</span></span></code></pre></div><ul><li>第三方插件的按需引入（element-ui 按需加载配置）</li><li>高频触发的事件使用防抖、节流（购物车商品数量操作）</li><li>大量的事件使用事件委托优化（三级分类导航）</li></ul><h2 id="打包工具层面的优化" tabindex="-1">打包工具层面的优化 <a class="header-anchor" href="#打包工具层面的优化" aria-label="Permalink to &quot;打包工具层面的优化&quot;">​</a></h2><h2 id="网络层面的优化" tabindex="-1">网络层面的优化 <a class="header-anchor" href="#网络层面的优化" aria-label="Permalink to &quot;网络层面的优化&quot;">​</a></h2><ul><li>开启 gzip 压缩</li><li>浏览器缓存（强缓存和协商缓存）</li><li>CDN 的使用（要结合 webpack 配置一起使用）</li><li>升级 http 协议为 2.0</li></ul>`,12),e=[o];function t(c,r,i,F,y,D){return a(),l("div",null,e)}const u=s(p,[["render",t]]);export{A as __pageData,u as default};
