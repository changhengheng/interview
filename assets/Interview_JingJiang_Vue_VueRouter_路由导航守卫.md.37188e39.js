import{_ as e,o as a,c as t,U as r}from"./chunks/framework.e0394e94.js";const f=JSON.parse('{"title":"路由导航守卫","description":"","frontmatter":{},"headers":[],"relativePath":"Interview/JingJiang/Vue/VueRouter/路由导航守卫.md","filePath":"Interview/JingJiang/Vue/VueRouter/路由导航守卫.md","lastUpdated":1689411224000}'),o={name:"Interview/JingJiang/Vue/VueRouter/路由导航守卫.md"},n=r('<h1 id="路由导航守卫" tabindex="-1">路由导航守卫 <a class="header-anchor" href="#路由导航守卫" aria-label="Permalink to &quot;路由导航守卫&quot;">​</a></h1><p>当路由跳转的时候，守卫可以去拦住，检测你是否有去往这个页面的条件，有特定条件才能去到相应的页面的功能拦截路由，查看是否满足条件，满足的放行，不满足的处理</p><h2 id="导航分类" tabindex="-1">导航分类 <a class="header-anchor" href="#导航分类" aria-label="Permalink to &quot;导航分类&quot;">​</a></h2><h3 id="全局导航守卫" tabindex="-1">全局导航守卫 <a class="header-anchor" href="#全局导航守卫" aria-label="Permalink to &quot;全局导航守卫&quot;">​</a></h3><p>无论是从哪个页面往哪个页面跳转，只要有路由跳转，就会拦住，进行检测</p><p><strong>全局前置守卫</strong> router.beforeEach：配置的比较靠前 匹配路由前拦截，用的最多 ***************</p><p><strong>全局解析守卫</strong> router.beforeResolve：配置的位置中间 匹配路由中拦截，用的比较少</p><p><strong>全局后置守卫</strong> router.afterEach：配置的比较靠后 匹配路由完成拦截，用的比较少</p><h3 id="路由独享守卫-beforeenter" tabindex="-1">路由独享守卫 beforeEnter <a class="header-anchor" href="#路由独享守卫-beforeenter" aria-label="Permalink to &quot;路由独享守卫 beforeEnter&quot;">​</a></h3><p>只能去拦住固定的往某个页面跳转的，是配置在当前路由当中，只要是匹配当前路由就会拦截检测 不是当前路由不管 只有一个</p><h3 id="组件内守卫" tabindex="-1">组件内守卫 <a class="header-anchor" href="#组件内守卫" aria-label="Permalink to &quot;组件内守卫&quot;">​</a></h3><p>只能去拦住固定的往某个页面跳转的，是配置在组件内部，也就是路由匹配已经完成了，时间比较 靠后 就是解析完了，已经跳转到组件的时候，但是组件还没创建成功的时候拦截</p>',12),i=[n];function s(h,_,c,l,d,u){return a(),t("div",null,i)}const b=e(o,[["render",s]]);export{f as __pageData,b as default};
