import{_ as e,o,c as t,U as a}from"./chunks/framework.e0394e94.js";const i="/interview/assets/8a79f6994fdf3e8fc9e704bc21a57055.5416810b.jpeg",b=JSON.parse('{"title":"说说原型与原型链","description":"","frontmatter":{},"headers":[],"relativePath":"Interview/JingJiang/JavaScript/原型和原型链.md","filePath":"Interview/JingJiang/JavaScript/原型和原型链.md","lastUpdated":null}'),c={name:"Interview/JingJiang/JavaScript/原型和原型链.md"},_=a('<h1 id="说说原型与原型链" tabindex="-1">说说原型与原型链 <a class="header-anchor" href="#说说原型与原型链" aria-label="Permalink to &quot;说说原型与原型链&quot;">​</a></h1><h2 id="_1-原型" tabindex="-1">1. 原型 <a class="header-anchor" href="#_1-原型" aria-label="Permalink to &quot;1. 原型&quot;">​</a></h2><ul><li>我们说的原型，指的是两个原型属性：<code>__proto__</code> 和 <code>prototype</code></li><li><code>prototype</code> 叫做显示原型属性</li><li><code>__proto__</code> 叫做隐式原型属性</li><li>每个函数都有一个显式原型属性，它的值是一个对象，我们叫做原型对象。</li><li>这个原型对象上默认会有一个 <code>constructor</code> 方法，指向函数本身，有一个<code>__proto__</code>属性，指向 Object 的原型对象</li><li>每个实例都有一个隐式原型属性，它的值指向其对应构造函数的原型对象。</li></ul><blockquote><p>特殊情况: <code>Function.prototype === Function.__proto__</code> 他们指向同一个对象 <code>Object.prototype.__proto__ === null</code> 这里是原型链的尽头</p></blockquote><p><img src="'+i+'" alt="8a79f6994fdf3e8fc9e704bc21a57055.jpeg"></p><h2 id="_2-原型链" tabindex="-1">2. 原型链 <a class="header-anchor" href="#_2-原型链" aria-label="Permalink to &quot;2. 原型链&quot;">​</a></h2><ul><li>概念：从对象的 <code>__proto__</code> 开始, 连接的所有对象, 这个结构叫做原型链，也可称为“隐式原型链”</li><li>作用：用来查找对象的属性</li><li>规则：在查找对象属性或调用对象方法时，会先在对象自身上查找， 找不到就会沿着原型链查找，找到就返回属性的值，最终来到<code>Object.prototype.__proto__</code>，找不到返回 undefined</li><li>应用：利用原型链可以实现继承 <ul><li>Vue 中全局事件总线 <code>$bus</code></li><li>项目中 <code>$api / $http</code> 汇总所有接口函数</li></ul></li></ul>',7),l=[_];function r(d,n,p,s,u,h){return o(),t("div",null,l)}const m=e(c,[["render",r]]);export{b as __pageData,m as default};
